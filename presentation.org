#+TITLE: An Idiots Guide to Sinon.JS
#+AUTHOR: Dave Voutila
#+EMAIL: dave@sisu.io
#+DATE: 2018-03-21
#+STARTUP: inlineimages showall

* 0. Reticulating Splines...
  If you're reading this inside Emacs, execute this code block to initialize
  the environment to allow presentation mode and live code execution. Simply
  move the cursor to within the code and use: C-c C-c

  You should then see some output in the Results section.

  You can now use the same command (C-c C-c) aka "org-ctrl-c-ctrl-c" (no lie)
  to run any of the provided code directly from within this file.

** Presentation Controls
   - *Start* - M-x org-present
   - *Next* - <page down>
   - *Previous* - <page up>
   - *Quit* - C-c C-q

#+NAME: initialize-presentation
#+BEGIN_SRC emacs-lisp :results value verbatim
  (load-file "./init-sinon-for-idiots.el")
  (org-babel-do-load-languages
   'org-babel-load-languages '((emacs-lisp . t) (js . t)))
  (setq org-babel-js-cmd
        "NODE_PATH=${PWD}/node_modules node")
  (setq org-confirm-babel-evaluate nil)
  (shell-command-to-string "npm install")
#+END_SRC
#+RESULTS: initialize-presentation
: "up to date in 0.123s
: "


* 1. Your Idiot/Speaker

** Who am I?
   - Dave Voutila
   - [[mailto:dave@sisu.io]]
   - [[https://github.com/voutilad]]

** $WORK: Independent Software Consultant
   - (2+ years) Owner @ Sisu Integrated Services LLC - /Make the Complex Simple/
   - (~1 year) Advisor @ [[https://taskanalytics.com][Task Analytics]] - /We measure Customer Intent/

** Background
   - *Java* and *Python*
     > 10 years as a Sales Engineer for enterprise software companies
   - *Javascript* newbie
     < 1 year in *node.js* backend dev (be gentle, folks)


* 2. So what's Sinon.JS?  

** Test-framework independent
   - Use mocha, ava, whatever...

** Provides standalone spies, stubs, and mocks
   - spies: tell you if/how something was called
   - stubs: replace behavior of methods
   - mocks: above plus can set expectations

** So why Sinon?
   - Sometimes you just need to test what you have
   - You don't have functional purity


* 3a. Spy vs. Spy
** Wrapping
   - Typically, spies "wrap" an existing method
   - Tell you if/how that method was used

** Usages
   - check code paths based on what gets called
   - check calling arguments
   - check return values

** Can be used for Anonymous functions
   - useful for replacing callbacks


* 3b. Spy Sample Code
#+NAME: spy-example
#+BEGIN_SRC js -n :results value verbatim
  const sinon = require('sinon')
  const timeSpy = sinon.spy(Date.prototype, 'getTime')

  const time = new Date().getTime()

  console.log(`Current time: ${time}`)
  console.log(`timeSpy.called?: ${timeSpy.called}`)

  // You can call spies directly (if using as anon fn's)
  const spy = sinon.spy()
  spy('cool', { beans: 1337 })

  return spy.args
#+END_SRC

** Results
#+RESULTS: spy-example
: Current time: 1521654082956
: timeSpy.called?: true
: [ [ 'cool', { beans: 1337 } ] ]


* 4a. I didn't chose the Stub Life...

** Get control of hard-to-test code
   - Some code (/who, mine?/) is hard to isolate for unit testing
   - Sometimes refactoring to support testing isn't an option
   - Buys you time to reach pure functional nirvana

** External Systems
   - RDBMS? Redis? /stub it out/
   - Isolate the code you're testing from external crap

** Create test "state"
   - /If called with X, return Y/
   - Supports Promises


* 4b. Stub Sample Code
#+NAME: stub-example
#+BEGIN_SRC js -n :results value verbatim
  const sinon = require('sinon')

  class Greeter {
    sayHey (name) {
      return `Oh, hi there ${name}!`
    }
  }

  const greeter = new Greeter()
  let msg = greeter.sayHey('BTVJS')
  console.log(`Before stubbing: ${msg}`)

  const stub = sinon.stub(Greeter.prototype, 'sayHey').returns('Sup everyone')
  msg = greeter.sayHey('BTVJS')
  console.log(`After stubbing: ${msg}`)

  return stub.args
#+END_SRC

** Results
#+RESULTS: stub-example
: Before stubbing: Oh, hi there BTVJS!
: After stubbing: Sup everyone
: [ [ 'BTVJS' ] ]


* 4c. Stubbing Modules
  Some gotchas...

** Understand what the module exports
   - object: super easy 
   - class: use /.prototype/ (see previous examples)
   - function: /ugh.../

** The module-as-function Problem
   - Too long to address here, but let's say
     it's probably wise to refactor


* 5a. Making a Mockery

** Setting Expectations
   - mocks are designed to verify expected behavior
   - you set expectations
   - you then verify they were met

** Mocks are a bit more challenging
   - designed to throw errors
   - therefore, can easily fail your tests


* 5b. Mocks Code Example
#+NAME: mock-example
#+BEGIN_SRC js -n :results value verbatim
  const sinon = require('sinon')
  const API = { method: function () {} };

  let mock = sinon.mock(API)
  mock.expects('method').atLeast(1)

  API.method()
  console.log(`1st verify: ${mock.verify()}`)
  mock.restore()

  mock = sinon.mock(API).expects('method').atMost(1)

  try {
    API.method()
    API.method()
    console.log(`2nd verify: ${mock.verify()}`)
  } catch (err) {
    console.log(`2nd verify: ${err.message}`)
  }

#+END_SRC

** Results:
#+RESULTS: mock-example
: 1st verify: true
: 2nd verify: Unexpected call: method()
:     Expectation met: method([...]) at most once
: undefined


* 6a. When I played in the Sandbox...
  /...the cat kept covering me up./
                    -- Rodney Dangerfield

** Super-duper Useful
   - manages complexity of numerous stubs & spies
   - simplifies setup/teardown

** Doesn't Resolve Sequencing Issue!
   - You'll still need to test in serial
   - But it should help if Sinon is breaking tests :-)

** Other Caveats
   - can only stub/spy/mock exported or public things


* 6b. Sandbox Code Example
#+NAME: sandbox-example
#+BEGIN_SRC js -n :results value verbatim
  const sinon = require('sinon')
  const sandbox = sinon.createSandbox()
  const crypto = require('crypto')

  function randomNumber () {
    try {
      const date = new Date()
      const number = crypto.randomBytes(1)[0] & date.getTime()
      console.log(`The time is ${date}. Your "random" number is ${number}.`)
    } catch (err) {
      console.log(`ERROR! ${err.name}`)
    }
  }

  sandbox.stub(Date.prototype, 'getTime').returns(872812800)
  sandbox.stub(crypto, 'randomBytes').throws('not enough entropy!')
  console.log('-- After Stubbing --')
  randomNumber()

  sandbox.restore()
  console.log('\n-- After Restoring Sandbox --')
  randomNumber()
#+END_SRC

#+RESULTS: sandbox-example
: -- After Stubbing --
: ERROR! not enough entropy!
: 
: -- After Restoring Sandbox --
: The time is Thu Mar 22 2018 08:36:45 GMT-0400 (EDT). Your "random" number is 8.
: undefined

* 7. The End!

** Continued Learning
   - Documentation: [[http://sinonjs.org/][Sinon.JS homepage]]
   - More advanced Sinon Features!
     - Fake timers
     - Fake XHR or HTTP servers
     - Sinon's assertion framework

** Emacs Org-mode:
   - [[https://orgmode.org/][Org-mode Homepage]] (the magic of literate coding)
   - [[https://github.com/rlister/org-present][org-present]] (what's driving this presentation)

** My Other Presentations
   - [[https://voutilad.github.io/]]

** THANKS!!!
